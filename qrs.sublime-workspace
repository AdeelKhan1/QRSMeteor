{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"user",
				"userId"
			],
			[
				"userI",
				"userID's"
			],
			[
				"integ",
				"integration.qlik.com"
			],
			[
				"re",
				"response〔variable〕"
			],
			[
				"enco",
				"encodedReturnURI"
			],
			[
				"Qlik",
				"QlikSSO"
			],
			[
				"en",
				"encodedURI"
			],
			[
				"de",
				"delete_cookie"
			],
			[
				"Met",
				"Meteor"
			],
			[
				"fu",
				"function"
			],
			[
				"data-r",
				"data-rotate-y"
			],
			[
				"Ql",
				"QlikCookies"
			],
			[
				"Co",
				"Cookies"
			],
			[
				"last",
				"lastName"
			],
			[
				"fir",
				"firstName"
			],
			[
				"rout",
				"routeName〔variable〕"
			],
			[
				"rou",
				"routeName〔variable〕"
			],
			[
				"sh",
				"showSlideSorter"
			],
			[
				"cons",
				"console.log('de"
			],
			[
				"po",
				"positive"
			],
			[
				"res",
				"result〔variable〕"
			],
			[
				"Meteo",
				"Meteor.userId"
			],
			[
				"htt",
				"httpRequest〔variable〕"
			],
			[
				"on",
				"onRendered"
			],
			[
				"Se",
				"Session.get('integrationTopics"
			],
			[
				"ini",
				"initializePresentation〔function〕"
			],
			[
				"land",
				"landingPageAlreadySeen"
			],
			[
				"ppt",
				"ppt_integrationMain"
			],
			[
				"lan",
				"landingPageAlreadySeen"
			],
			[
				"slide",
				"slidedeck"
			],
			[
				"delte",
				"deleteApp"
			],
			[
				"tra",
				"translate\tAttr"
			],
			[
				"gen",
				"generationUserId〔variable〕"
			],
			[
				"cop",
				"copyApp"
			],
			[
				"git",
				"gitHubLinks"
			],
			[
				"presen",
				"presentationLayout"
			],
			[
				"uns",
				"unsupported"
			],
			[
				"is",
				"isIEorEDGE"
			],
			[
				"u",
				"ul\tTag"
			],
			[
				"log",
				"logoutUser"
			],
			[
				"selec",
				"selectSlide"
			],
			[
				"conso",
				"console.log('SSO"
			],
			[
				"redi",
				"redirectPresentationUser〔function〕"
			],
			[
				"ref",
				"refreshModal"
			],
			[
				"sense",
				"sense"
			],
			[
				"saa",
				"saasdemo.qlik.com"
			],
			[
				"fa",
				"false"
			],
			[
				"set",
				"setTimeout"
			],
			[
				"consol",
				"console.log('insert"
			],
			[
				"up",
				"updatedUser"
			],
			[
				"De",
				"Developer"
			],
			[
				"con",
				"console"
			],
			[
				"dy",
				"dummyCustomer"
			],
			[
				"dumm",
				"dummyCustomer"
			],
			[
				"console",
				"console.log"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"high",
				"highlighted"
			],
			[
				"for",
				"formattedResponse〔function〕"
			],
			[
				"slid",
				"slideNr"
			],
			[
				"ac",
				"activeStepNr"
			],
			[
				"sli",
				"slideNr"
			],
			[
				"inte",
				"integrationSlide"
			],
			[
				"cur",
				"currentStepNr"
			],
			[
				"curre",
				"currentSlide"
			],
			[
				"cosn",
				"console.log('button"
			],
			[
				"marg",
				"margin-left"
			],
			[
				"mar",
				"margin"
			],
			[
				"thank",
				"thankYou"
			],
			[
				"Ses",
				"Session.set('clickedInSelection"
			],
			[
				"block",
				"blockquote"
			],
			[
				"MAR",
				"margin-top"
			],
			[
				"data",
				"data-rotate"
			],
			[
				"background-c",
				"background-color"
			],
			[
				"gene",
				"generator"
			],
			[
				"di",
				"div\tTag"
			],
			[
				"tex",
				"text-align"
			],
			[
				"wid",
				"width"
			],
			[
				"te",
				"text-align"
			],
			[
				"min",
				"min-height"
			],
			[
				"font",
				"font-size"
			],
			[
				"tr",
				"target\tAttr"
			],
			[
				"yout",
				"youtube"
			],
			[
				"so",
				"sortedArray"
			],
			[
				"ta",
				"tableWithChapters"
			],
			[
				"curren",
				"currentRow"
			],
			[
				"cu",
				"currentRow"
			],
			[
				"new",
				"newTableWithChapter〔variable〕"
			],
			[
				"curr",
				"currentRow〔argument〕"
			],
			[
				"current",
				"currentLevel1"
			],
			[
				"Sess",
				"Session.get('selectedDataSet"
			],
			[
				"of",
				"overflow"
			],
			[
				"co",
				"color"
			],
			[
				"fon",
				"font-size"
			],
			[
				"conc",
				"console.log('convert"
			],
			[
				"le",
				"level"
			],
			[
				"height",
				"height: 〔property〕"
			],
			[
				"getval",
				"getLocalValuesOfLevel"
			],
			[
				"ses",
				"sessionName〔variable〕"
			],
			[
				"getl",
				"getLevel1and2Names〔function〕"
			],
			[
				"h",
				"haystack"
			],
			[
				"get",
				"getLeven1to3"
			],
			[
				"you",
				"youtube"
			],
			[
				"lo",
				"location"
			],
			[
				"Tr",
				"Tracker.autorun"
			],
			[
				"main",
				"mainTopics"
			],
			[
				"qi",
				"qixschema"
			],
			[
				"ap",
				"appChangeListener"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"in",
				"instance"
			],
			[
				"top",
				"topics〔variable〕"
			],
			[
				"par",
				"parent〔variable〕"
			],
			[
				"level",
				"level3Data"
			],
			[
				"leve",
				"level3Data"
			],
			[
				"fo",
				"font-size"
			],
			[
				"app",
				"appId〔argument〕"
			],
			[
				"cre",
				"createList〔function〕"
			],
			[
				"U",
				"URLtoOpen"
			],
			[
				"integr",
				"integrationTopics"
			],
			[
				"initia",
				"initialized"
			],
			[
				"margi",
				"margin-left"
			],
			[
				"imp",
				"impressInitialized〔variable〕"
			],
			[
				"cente",
				"centered"
			],
			[
				"pos",
				"positioning"
			],
			[
				"ins",
				"insertDummyCustomers"
			],
			[
				"redirect",
				"redirectUrl"
			],
			[
				"insert",
				"insertCustomer"
			],
			[
				"sho",
				"showIFrame"
			],
			[
				"QM",
				"QMCUrl"
			]
		]
	},
	"buffers":
	[
		{
			"file": "imports/ui/impress/landingPage.html",
			"settings":
			{
				"buffer_size": 2915,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/proxy.js",
			"settings":
			{
				"buffer_size": 894,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imports/ui/impress/landingPage.js",
			"settings":
			{
				"buffer_size": 5536,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var Cookies = require('js-cookie');\n\n//Layout Configuration. http://stackoverflow.com/questions/28864942/meteor-use-2-different-layouts-ironrouter\nRouter.configure({\n    layoutTemplate: 'layout',\n    notFoundTemplate: 'notFound',\n});\n\n//redirect users from saasdemo.qlik.com to integration.qlik.com\nif(window.location.href.indexOf(\"saasdemo\") > -1) {\n    // var newURL = 'http://'+window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname;\n    window.location = \"http://integration.qlik.com\" + window.location.pathname;\n}\n\n//make sure certain path are for authenticated users only\nRouter.plugin('ensureSignedIn', {\n    // only: ['generation', 'users', 'SSO', 'useCaseSelection', 'integration', 'selfService', 'slides', 'presentation']\n    except: [undefined, 'test', 'useCaseSelection', 'documentation', 'atSignIn', 'atSignUp', 'atForgotPassword']\n});\n\n// this hook will run on almost all routes\n// Router.onBeforeAction(mustBeSignedIn, { except: [undefined, 'useCaseSelection', 'documentation', 'login', 'signup', 'forgotPassword'] });\nRouter.onBeforeAction(mustBeSignedIn, { only: ['test'] });\n\nfunction mustBeSignedIn() {\n    var routeName = Router.current().route.getName();\n    console.log('mustBeSignedIn called hook for route: ', routeName);\n    var QlikUserProfile = Cookies.get('CSUser');\n    if(!QlikUserProfile) {\n        //if user is not logged in, redirect to Qliks login page, after it we can read the cookie.\n        //             // similar behavior as an HTTP redirect\n        console.log('The user tried to open: ' + routeName + ' but first ensure the users logs in at Qlik.com');\n        var uri = \"http://localhost:3000/\" + routeName;\n        var encodedReturnURI = encodeURIComponent(uri);\n        console.log('encodeURIComponent:', encodedReturnURI);\n        var QlikSSO = \"https://login.qlik.com/login.aspx?returnURL=\" + encodedReturnURI;\n        window.location.replace(QlikSSO); //\n    } else {\n        var [username, firstName, lastName, emailAddress, contactID, accountID, ulcLevels, hash] = QlikUserProfile.split('&');\n        const user = {\n            email: emailAddress,\n            profile: {\n                name: { first: firstName, last: lastName },\n            },\n            roles: ulcLevels.substr(ulcLevels.indexOf(\"=\") + 1)\n        };\n        try {\n            check(user, {\n                email: String,\n                password: String,\n                profile: { name: { first: String, last: String } },\n                roles: [String],\n            });\n        } catch(err) {\n            Meteor.Error('unable to create a user received from Qlik.com', 'Missing fields');\n        }\n        console.log('the user has got a QLIK PROFILE', user, 'Now try to create the user in our local MONGODB or just log him in with a server only stored password');\n        loginUser(user);\n    }\n    this.next();\n};\n\nfunction loginUser(user) {\n    console.log('login user ', user);\n    const userExists = Accounts.findUserByEmail(user.email);\n    console.log('found user: ', userExists);\n    var userId = {};\n    if(!userExists) {\n        //On the client, this function logs in as the newly created user on successful completion. On the server, it returns the newly created user id.\n        //https://docs.meteor.com/api/passwords.html#Accounts-createUser\n        user.password = user.email;\n        userId = Accounts.createUser(user);\n        Roles.addUsersToRoles(userId, user.roles, 'GLOBAL');\n    } else {\n        userId = userExists._id;\n    }\n}\n\n// //map paths to blaze templates\nRouter.route('/', function() {\n    this.layout('oneColumnCenteredLayout');\n    this.render('useCaseSelection');\n});\n\nRouter.route('/users');\nRouter.route('/userOverview');\nRouter.route('/homeAbout');\nRouter.route('/APILogs');\nRouter.route('/ApiLogsTable');\nRouter.route('/introduction');\nRouter.route('/videoOverview');\nRouter.route('/introductionExtended');\nRouter.route('/introductionSecurity');\nRouter.route('/SecurityDeepDive');\nRouter.route('/generation');\nRouter.route('/securityRules');\nRouter.route('/QMC');\nRouter.route('/webIntegration');\nRouter.route('/architecture');\nRouter.route('/sequenceDiagramOverview');\nRouter.route('/sequenceDiagramGeneration');\nRouter.route('/legal');\nRouter.route('/documentation');\nRouter.route('/templateOverview');\n\nRouter.route('/ppt_integration', {\n    template: 'ppt_integration',\n    layoutTemplate: 'SSOLayout'\n});\n\nRouter.route('/test', {\n    template: 'videoOverview',\n});\n\n// Single sing on integration route, this is the route you configure in Qlik sense proxy\nRouter.route('/SSO', {\n    template: 'SSO',\n    layoutTemplate: 'SSOLayout'\n});\n\n//users for the slide generator have their own virtual proxy redirect path\nRouter.route('/presentationsso', {\n    template: 'SSO',\n    layoutTemplate: 'SSOLayout'\n});\n\nRouter.route('/impress', {\n    template: 'impress',\n    layoutTemplate: 'SSOLayout'\n});\n\nRouter.route('/slideSorter', {\n    template: 'slideSorter',\n    layoutTemplate: 'SSOLayout'\n});\n\n\nRouter.route('/presentation', {\n    template: 'landingPage',\n    layoutTemplate: 'presentationLayout'\n});\n\nRouter.route('/slideGenerator', {\n    template: 'ppt_integrationMain',\n    layoutTemplate: 'presentationLayout'\n});\n\n//slide deck integration\nRouter.route('/integration', {\n    template: 'landingPage',\n    layoutTemplate: 'presentationLayout'\n});\nRouter.route('/slides', {\n    template: 'landingPage',\n    layoutTemplate: 'presentationLayout'\n});\n\n\nRouter.route('/useCaseSelection', function() {\n    this.layout('oneColumnCenteredLayout');\n    this.render('useCaseSelection');\n});\n\n\n\nRouter.route('/selfService', function() {\n    this.layout('regionLayout');\n    this.render('SSBINav', { to: 'nav' });\n    this.render('SSBIUsers', { to: 'aside' });\n    this.render('SSBISenseApp');\n});\n\n\n// Router.route('/signup');\n\n// Router.route('/register');\n// Router.route('/login');\n",
			"file": "imports/ui/router.js",
			"file_size": 5514,
			"file_write_time": 131398611150806047,
			"settings":
			{
				"buffer_size": 5873,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import { Meteor } from 'meteor/meteor';\nimport { Customers, dummyCustomers, dummyCustomer } from '/imports/api/customers';\nimport { REST_Log } from '/imports/api/APILogs';\nimport { gitHubLinks } from '/imports/ui/UIHelpers';\n\n//import config for Qlik Sense QRS\nimport { senseConfig, _certs, authHeadersCertificate, authHeaders, certicate_communication_options } from '/imports/api/config.js';\nimport lodash from 'lodash';\n_ = lodash;\n\n/*\nWhen communicating with the QPS APIs, the URL is as follows:\nhttps://<QPS machine name>:4243/<path>\n\nEach proxy has its own session cookie, so you have to logout the users per proxy used.\n*/\n\nMeteor.methods({\n    currentlyLoggedInUser() {\n        // console.log(\"Meteor will now look which user is currently logged in, and request a ticket for this ID, and add his group memberships.\");\n        var call = {};\n        call.action = 'STEP 3: Server received request to create ticket'\n        call.request = 'Meteor server received a incoming method call from the browser. The meteor server will now look which user is currently logged in, and create a ticket for this ID, and add his group memberships.';\n        REST_Log(call, Meteor.userId());\n\n        //first find the customers that have a logged in users (mongo returns a complete document)\n        var customer = Customers.findOne({ generationUserId: Meteor.userId(), 'users.currentlyLoggedIn': true });\n        // console.log('In our local database we can find the customer with the currentlyLoggedIn set to true for user: ' + loggedInUser + ', the customer which contains the user that the user selected with the dropdown: ', customer);\n\n        //now we have the document, we can look in the array of users, to find the one that is logged in.\n        var user;\n        if (!customer) { //if no user is selected, just insert john as a dummy\n            // const error = 'You have not selected a user you want to simulate the Single Sign on with. For demo purposes we now selected John for you. You can also select your own user in step 4 of the SaaS demo';\n            var response = {};\n            // console.log('dummyCustomer :', dummyCustomer);\n            response.user = dummyCustomer.user;\n            response.customer = dummyCustomer;\n            // throw new Meteor.Warning('No user', error);\n        } else {\n            var user = _.find(customer.users, { 'currentlyLoggedIn': true });\n            var response = {};\n            response.user = user;\n            response.customer = customer;\n        }\n        // console.log('the response is: ', response);\n        return response;\n\n    },\n    getRedirectUrl(proxyRestUri, targetId, loggedInUser) {\n        var response = Meteor.call('currentlyLoggedInUser');\n        var customer = response.customer;\n        var user = response.user;\n\n        // console.log('UserID currently logged in in the demo platform: ' + loggedInUser + '. Meteor server side thinks the meteor.userId is ' + Meteor.userId() + '. We use this as the UDC name');\n        //Create a paspoort (ticket) request: user directory, user identity and attributes\n        var passport = {\n                'UserDirectory': Meteor.userId(), //Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n                'UserId': user.name, //the current user that we are going to login with\n                'Attributes': [{ 'group': customer.name.toUpperCase() }, //attributes supply the group membership from the source system to Qlik Sense\n                    { 'group': user.country.toUpperCase() },\n                    { 'group': user.group.toUpperCase() }\n                ]\n            }\n            // console.log('Request ticket for this user passport\": ', passport);\n\n        //logging only\n        var call = {};\n        call.action = 'STEP 4: User and group information received from customer database, now we can request a ticket';\n        call.url = gitHubLinks.createpassport;\n        call.request = 'Request ticket for this user and his groups (an array of values which you can use in the security rules): \": ' + JSON.stringify(passport);\n        REST_Log(call, Meteor.userId());\n\n        return getRedirectURL(passport, proxyRestUri, targetId, Meteor.userId());\n    },\n    loginUserForPresentation(proxyRestUri, targetId, userProperties) {\n        try {\n            check(userProperties.user, String);\n            check(userProperties.group, String);\n        } catch (err) {\n            throw new Meteor.Error('Failed to login into Qlik Sense via a ticket', 'Please go to the landing page and select your group. We could not request a ticket because the userId or groups (technical, generic) are not provided');\n        }\n\n        // console.log('loginUserForPresentation: ', userProperties.user);\n        var passport = {\n                'UserDirectory': userProperties.user, //Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n                'UserId': userProperties.user, //the current user that we are going to login with\n                'Attributes': [\n                    { 'group': 'slideGenerator' }, //attributes supply the group membership from the source system to Qlik Sense\n                    { 'group': userProperties.group },\n                    { 'group': 'ITALY' } //make sure the row level demo works by passing this\n                ]\n            }\n            //logging only\n        var call = {};\n        call.url = gitHubLinks.createPasport;\n        call.action = 'Presentation user: Request ticket for the user that requested the slide generator. In this way we can store his bookmarks.';\n        call.request = 'We created a JSON object with the user and his groups. We now send this \"ticket\" to Qlik Sense. And we expect to receive a \"ticket number\" back, which we can append to the URL redirect. Note that we give each customer its own User Directory, so that users of different tenants are really separated';\n        call.response = passport;\n        REST_Log(call, Meteor.userId());\n\n        return getRedirectURL(passport, proxyRestUri, targetId, Meteor.userId());\n    },\n    resetLoggedInUser() {\n        // console.log(\"***Method resetLoggedInUsers\");\n        // console.log('call the QPS logout api, to invalidate the session cookie for each user in our local database');\n\n        //reset the local database. set all users to not logged in. We need this code because we do a simulation of the login and not a real end user login.\n        Customers.find({ 'generationUserId': Meteor.userId() })\n            .forEach(function(customer) {\n                var updatedUsers = _.map(customer.users, function(user) {\n                    if (user) {\n                        user.currentlyLoggedIn = false;\n                    }\n\n                    //and just logout everybody in the user list                            \n                    logoutUser(Meteor.userId(), user.name);\n                    return user;\n                })\n\n                Customers.update(customer._id, {\n                    $set: { users: updatedUsers },\n                });\n\n            });\n        // logoutUser(Meteor.userId(), Meteor.userId()); //logout the user for the slide generator\n    },\n    logoutPresentationUser(UDC, name) {\n        logoutUser(UDC, name, Meteor.settings.public.IntegrationPresentationProxy);\n    },\n    simulateUserLogin(name) {\n        check(name, String);\n        Meteor.call('resetLoggedInUser');\n        // console.log('*** Reset all logged in user done, now write in our local database the name for the current simulated user: generationUserId: ' + Meteor.userId() + ' & users.name:' + name);\n        var query = [\n            { 'generationUserId': Meteor.userId(), \"users.name\": name }, {\n                $set: {\n                    'users.$.currentlyLoggedIn': true\n                }\n            }\n        ];\n\n        Customers.update({ 'generationUserId': Meteor.userId(), \"users.name\": name }, {\n            $set: {\n                'users.$.currentlyLoggedIn': true\n            }\n        }, {}, function(error, numberAffectedDocuments) {\n            if (numberAffectedDocuments === 0) { //if nothing is updated, insert some dummy customers\n                // console.log('simulateUserLogin numberAffectedDocuments: ', numberAffectedDocuments);\n                //name does not yet exist in the customers created by the current demo user. So insert our dummy customers.numberAffectedDocuments\n                insertDummyCustomers(Meteor.userId());\n                Customers.update({ 'generationUserId': Meteor.userId(), \"users.name\": name }, {\n                    $set: {\n                        'users.$.currentlyLoggedIn': true\n                    }\n                });\n            }\n        })\n    }\n})\n\nMeteor.methods({\n    'createAndLoginUser' (user) {\n        console.log('qps: login user ' + user.profile.name);\n        try {\n            check(user, {\n                email: String,\n                password: String,\n                profile: { name: { first: String, last: String } },\n                roles: [String],\n            });\n        } catch (err) {\n            Meteor.Error('unable to create a user received from Qlik.com', 'Missing fields');\n        }\n        const userExists = Accounts.findUserByEmail(user.email);\n        console.log('found user: ',userExists);\n        var userId = {};\n        if (!userExists) {\n            //On the client, this function logs in as the newly created user on successful completion. On the server, it returns the newly created user id.\n            //https://docs.meteor.com/api/passwords.html#Accounts-createUser\n            user.password = user.email;\n            userId = Accounts.createUser(user);\n            Roles.addUsersToRoles(userId, user.roles, 'GLOBAL');\n        } else {\n            userId = userExists._id;\n        }\n        return LoginToken.createTokenForUser(userId);\n    }\n})\n\nfunction insertDummyCustomers(generationUserId) {\n    // console.log('insertDummyCustomers called for generationUserId: ', generationUserId);\n    _.each(dummyCustomers, function(customer) {\n        customer.generationUserId = generationUserId;\n        Customers.insert(customer);\n    })\n}\n\nexport function logoutUser(UDC, name, proxy) {\n    if (!proxy) {\n        proxy = senseConfig.virtualProxyClientUsage\n    } //use use the proxy for the dummy users from step 4\n    // console.log('******** QPS Functions: logout the current: ' + name + ' on proxy: ' + proxy);\n\n    if (name) {\n        // //console.log('Make QPS-logout call, We authenticate to Sense using the options (including a certificate) object in the HTTPs call: '); //, certicate_communication_options);\n        // //console.log('Meteor tries to logout the user on this URL: https://' + senseConfig.SenseServerInternalLanIP + ':4243/qps/' + senseConfig.virtualProxyClientUsage + '/user/' + senseConfig.UDC + '/' + name);\n        try {\n            const call = {};\n            call.action = 'Logout user: ' + name;\n            call.url = gitHubLinks.logoutUser;\n            call.request = 'https://' + senseConfig.SenseServerInternalLanIP + ':4243/qps/' + proxy + '/user/' + UDC + '/' + name + '?xrfkey=' + senseConfig.xrfkey\n            call.response = HTTP.call('DELETE', call.request, { 'npmRequestOptions': certicate_communication_options })\n\n            REST_Log(call, UDC); //the UDC is the by definition the userId of meteor in our approach...\n            // console.log('The HTTP REQUEST to Sense QPS API:', call.request);\n            // console.log('The HTTP RESPONSE from Sense QPS API: ', call.response);\n\n        } catch (err) {\n            console.error(err);\n            throw new Meteor.Error('Logout user failed', err.message);\n        }\n    }\n};\n\n//based on Rikard Braathen's QlikAuth module\nexport function getRedirectURL(passport, proxyRestUri, targetId, generationUserId) {\n    check(passport, Object);\n    check(proxyRestUri, String);\n    check(targetId, String);\n    check(generationUserId, String);\n\n    // console.log('entered server side requestTicket module for user and passport', passport, proxyRestUri);\n    //see https://help.qlik.com/en-US/sense-developer/3.0/Subsystems/ProxyServiceAPI/Content/ProxyServiceAPI/ProxyServiceAPI-ProxyServiceAPI-Authentication-Ticket-Add.htm\n\n    var ticketRequestBody = passport;\n    ticketRequestBody.TargetId = targetId;\n    // console.log('The passport for requesting a ticket: ', passport);\n\n    try {\n        var call = {};\n        call.action = 'STEP 5: Request ticket at endpoint received from Sense: ' + proxyRestUri;\n        call.request = proxyRestUri + 'ticket'; //we use the proxy rest uri which we got from the redirect from the proxy (the first bounce)\n        call.url = gitHubLinks.requestTicket;\n        call.response = HTTP.call('POST', call.request, {\n            'npmRequestOptions': certicate_communication_options,\n            headers: authHeaders,\n            params: { 'xrfkey': senseConfig.xrfkey },\n            data: passport //the user and group info for which we want to create a ticket\n        });\n        REST_Log(call, generationUserId);\n    } catch (err) {\n        console.error('REST call to request a ticket failed', err);\n        throw new Meteor.Error('Request ticket failed', err.message);\n    }\n\n    // console.log('The HTTP REQUEST to Sense QPS API:', call.request);\n    // console.log('The HTTP RESPONSE from Sense QPS API: ', call.response);\n    var ticketResponse = call.response.data;\n    call.action = 'STEP 6: Use response from our ticket request to create redirect url';\n    call.request = 'Use the redirect url we got back and the ticket string to make a redirect url for the client. Format: ' + ticketResponse.TargetUri + '?QlikTicket=' + ticketResponse.Ticket + '. JSON received: ' + ticketResponse\n    REST_Log(call);\n\n\n    //Build redirect URL for the client including the ticket\n    if (ticketResponse.TargetUri.indexOf(\"?\") > 0) {\n        redirectURI = ticketResponse.TargetUri + '&QlikTicket=' + ticketResponse.Ticket;\n    } else {\n        redirectURI = ticketResponse.TargetUri + '?QlikTicket=' + ticketResponse.Ticket;\n    }\n\n    if (!redirectURI) { redirectURI = \"http://\" + senseConfig.host + \":\" + senseConfig.port + \"/\" + senseConfig.virtualProxyClientUsage + \"/\" + hub; }\n    // console.log('Meteor server side created this redirect url: ', redirectURI);\n    return redirectURI;\n}\n",
			"file": "imports/api/server/QPSFunctions.js",
			"file_size": 14888,
			"file_write_time": 131398611911653088,
			"settings":
			{
				"buffer_size": 14662,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": ".meteor/packages",
			"settings":
			{
				"buffer_size": 2004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 784.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"P",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"package",
				"Preferences: Browse Packages"
			],
			[
				"tern",
				"TernJS: Reload"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 1056.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.meteor",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layouts",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/public",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server"
	],
	"file_history":
	[
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/client/SSO.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/users.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QPSFunctions.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/impress.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/APILogs.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/APILogs.js",
		"/C/Users/mbj/Desktop/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/README.md",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-development.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/simulateUserLogin.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step2.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-production.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/accounts.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/router.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/landingPage.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/landingPage.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/main.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/UIHelpers.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationMain.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layouts/layout.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/ppt_integration.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/impress.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/useCases/useCaseSelection.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/useCases/SSBI/SSBI.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/slideSorter.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/impressJSModifiedSource.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/slideSorter.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/ppt_integration.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationMain.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationMain.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/impress.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/generation.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/generation.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step3.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introductionSecurity.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QRSFunctionsStream.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/APILogs.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QRSFunctionsApp.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/config.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/publications.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/mainButtons.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layouts/layout.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/videoOverview.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/proxy.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-development - example.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/client/SSO.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/simulateUserLogin.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/landingPage.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/landingPage.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.meteor/packages",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/architecture.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/routes.js",
		"/C/Users/mbj/Desktop/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/JSHint Gutter/JSHint.sublime-settings",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/users.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.meteor/versions",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/customers.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step4.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/OEMPartner.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/eslint/package.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/OEMPartner.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/.eslintrc.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/eslint/conf/eslint-all.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/nav.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users/userOverview.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users/userOverview.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/steps.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/documentation.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/webIntegration.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/stylesheets/highLight.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/package.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.meteor/local/build/programs/server/app/app.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopics.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/progressBar.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/impress.js/js/impress.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/impressJSModifiedSource.js",
		"/C/Users/mbj/Documents/Documentatie/Qlikview inlezen/3 Security/Customized Authentication v2 0/Examples/Authenticate_aspx/Authenticate.aspx",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/highlight.js/lib/highlight.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/client/stylesheets/highLight.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopicsCircular.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopicsCircular.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopics.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopics.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopics.css",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopicsCircular.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopics.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/integrationTopicsCircular.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/useCases/SSBI/SSBI.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/stylesheets/main.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introduction.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/impress/introSlide.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/Impress/impress.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/Impress/impress.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introductionSecurity.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/webIntegration.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/client/stylesheets/impress.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.css",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/impress/impress.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/Impress/impress.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layouts/regionLayout.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/mainButtons.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/useCases/useCaseSelection.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/users/userOverview.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/securityRules.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/users/userOverview.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/securityRules.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users/login.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/startup/accounts-config.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/lib/yogiben.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client.pem",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/Login/login.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/Login/login.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/steps.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/notFound.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introduction.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layouts/regionLayout.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/useCases/SSBI/SSBI.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/useCases/SSBI/SSBI.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/layouts/regionLayout.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step2.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step3.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layout.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step4.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/generation/OEMPartnerSide/step2.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layout.html"
	],
	"find":
	{
		"height": 64.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\impress",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\generation\\OEMPartnerSide",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client\\lib",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\generation",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\generation\\OEMPartnerSide",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\pages",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\pages",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\pages",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client\\lib",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client\\lib",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Meteor projects\\slager 10dec\\client",
			"C:\\Meteor projects\\slager 10dec",
			"C:\\Users\\Qlik\\Meteor projects\\firstmeteor",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\client",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\server",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\lib",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"selectSlide",
			"Request ticket for this user and his groups",
			"One parameter is the REST endpoint URL to request a ticket.",
			"/public/images",
			"https://raw.githubusercontent.com/QHose/QRSMeteor/master",
			"saasdemo",
			"space",
			"copya",
			"userSelectedPresentationType",
			"enigma",
			"landingPage",
			"authenticated",
			"explained",
			"publish",
			"block",
			"cookie",
			"APILogstable",
			"INIT",
			"5",
			"item",
			"||",
			"init",
			"inint",
			"select",
			"select your slides",
			"login user",
			"around",
			"50",
			"slideContent",
			"init",
			"impressInitialized",
			"delete",
			"SenseServerInternalLanIP",
			"delete",
			"IFrameURLChapterSelection",
			"presentation group",
			"could not get a redirectUrl from Qlik Sense ",
			"landingPageAlreadySeen",
			"delete",
			"step 3",
			"3",
			"STEP 3",
			"delete",
			"deleteapp",
			"pasport",
			"REST_Log(call, ",
			"getRedirectURL",
			"copyApp",
			"deleteApp",
			"remove",
			"re",
			"RE",
			"re",
			"remove",
			"publishApp",
			" REST_Log(call);",
			"REST_Log",
			"reloadAppAndReplaceScriptviaEngine",
			"ismobi",
			"unsupported",
			"landing",
			"browserIsEdgeOrMobile",
			"isIE",
			"focus",
			"init",
			"select",
			"home",
			"loginUserForPresentation",
			"groupfor",
			"slideObjectURL",
			"prefix: 'anon'",
			"call the server",
			"call the",
			"loginUserForPresentation",
			"getRedirectUrl",
			"getRedirectURL",
			"modal",
			"sene",
			"sense",
			"_senseConfig",
			"onrendered",
			"sidebar",
			"onrendered",
			"sidebar",
			"showPresentation",
			"onrendered",
			"IntegrationPresenatationSortedDataObject",
			"IntegrationPresenatationSortedDataObject ",
			"IntegrationPresentationSelectionSheet",
			"IntegrationPresenatationSelectionSheet",
			"IntegrationPresenatationSelectionObject",
			"ppt_integration_landing",
			"ppt_integrationMain",
			"ppt_integration_landing",
			"authentication",
			"martin",
			"sheet",
			"youtu",
			"youtube",
			"edge",
			"chrome",
			"ppt_integrationMain",
			"dropdown",
			"reload",
			"modal",
			"{{> users",
			"{{> userse",
			"Customers",
			"customers",
			".find",
			"selectedCustomerDoc",
			"isselectedCustomer",
			"selectedCustomer",
			"console.log",
			"selectedCustomer",
			"selectedCustomerDoc",
			"autoindent",
			"qixschema",
			"simulates",
			"insertTemplateAndDummyCustomers",
			"facebook",
			"twitter",
			"facebook",
			"name=\"users\"",
			"users",
			"getApps",
			"qsocks",
			"APIIntroduction"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"public/images",
			"",
			"about",
			"host",
			"passport",
			" REST_Log(call,generationUserId);",
			"unsupported",
			"prefix: Meteor.settings.public.IntegrationPresentationProxy",
			"getTicket",
			"IntegrationPresentationSortedDataObject",
			"IntegrationPresentationSelectionSheet",
			"selectedCustomerStep1",
			"IntegrationPresenatationSelectionSheet",
			"\\\\",
			"",
			"z step introduction",
			"'anon'",
			"slideExists",
			"getLevel1to3",
			"getIntegrationTopics",
			"{\n    schema: qixschema,\n    appId: appId,\n    session: { //https://github.com/qlik-oss/enigma.js/blob/master/docs/qix/configuration.md#example-using-nodejs\n        host: senseConfig.host,\n        prefix: senseConfig.virtualProxyClientUsage,\n        port: senseConfig.port,\n        unsecure: true\n    }",
			"qixConfig",
			"<h2 class=\"ui icon header\">\n  <i class=\"settings icon\"></i>\n  <div class=\"content\">\n    Account Settings\n    <div class=\"sub header\">Manage your account settings and set e-mail preferences.</div>\n  </div>\n</h2>",
			"class=\"ui segment\"",
			"h1",
			"",
			".z.step",
			"#demoStep3",
			"",
			".z.step",
			"z step",
			".iStep",
			"iStep",
			"step",
			".iStep",
			"class=\"iStep\"",
			".iStep",
			"iStep",
			"questions",
			"",
			"#insertCustomer",
			"<div class=\"ui segment SSBI\">",
			"ssbi_logging_in",
			"",
			"Select this user",
			"",
			"<div class=\"description\">",
			"<div class=\"ui dimmer\">\n        <div class=\"content\">\n            <div class=\"center\">\n                <div class=\"ui button\">Select this demo</div>\n            </div>\n        </div>\n    </div>",
			"saasdemo.qlik.com",
			"step3or4",
			"mainButtons",
			"h4",
			"h3",
			" <div class=\"column\">",
			"h4",
			"five wide",
			"h3",
			"step4Buttons",
			"four wide",
			"five wide cl",
			"five wide c",
			"individual",
			"DIV",
			"mini",
			"h2",
			"step1NoCustomerScreen",
			"",
			"nlsch-mbj3",
			"console.log",
			"//console.log",
			"passport",
			"options.Certificate",
			"rgb(220,220,220)",
			"fill: rgb(215,215,217);",
			"mini",
			"tiny",
			"PRESALES1",
			"senseConfig.SenseServerInternalLanIP +':' + senseConfig.port + '/'+ senseConfig.virtualProxy",
			"senseConfig.SenseServerInternalLanIP",
			"appId",
			"Meteor.settings.private",
			"isSelectedCustomer",
			"Customer",
			"selectedCustomer",
			"h4",
			"500",
			"400225",
			"400",
			"",
			"name",
			"h4",
			"REST_Log.",
			"from '/imports/api/server/QRSFunctionsApp';",
			"from '/imports/api/server/QRSFunctionsStream';",
			"from '/imports/api/server/QRSFunctionsSystemRules';",
			"/imports/api/server/QRSFunctionsSystemRules",
			"from '/imports/api/server/QRSFunctionsStream';",
			"passport",
			"Meteor.settings.public",
			"\"",
			"'",
			"virtualProxyClientUsage",
			"users",
			"h3",
			"QRS Functions Appp",
			"updateLocalSenseCopy",
			"UpdateLocalSenseCopy",
			"updateSenseInfo",
			"in Qlik Sense via the QRS API",
			"currentApp.name",
			"id",
			"",
			"''",
			"",
			"_senseConfig",
			"senseConfig",
			"NPM_QRS",
			"QSApp.",
			"return QS.",
			"P",
			"Meteor.Error",
			"new P",
			"P",
			"checked",
			"true",
			"updateSenseInfo",
			"\\\\",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "imports/ui/impress/landingPage.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2915,
						"regions":
						{
						},
						"selection":
						[
							[
								781,
								781
							]
						],
						"settings":
						{
							"auto_complete": false,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/proxy.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 894,
						"regions":
						{
						},
						"selection":
						[
							[
								894,
								894
							]
						],
						"settings":
						{
							"auto_complete": false,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "imports/ui/impress/landingPage.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5536,
						"regions":
						{
						},
						"selection":
						[
							[
								1626,
								1626
							]
						],
						"settings":
						{
							"auto_complete": false,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "imports/ui/router.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5873,
						"regions":
						{
						},
						"selection":
						[
							[
								2528,
								2528
							]
						],
						"settings":
						{
							"auto_complete": false,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1027.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "imports/api/server/QPSFunctions.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14662,
						"regions":
						{
						},
						"selection":
						[
							[
								9112,
								10131
							]
						],
						"settings":
						{
							"auto_complete": false,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4850.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": ".meteor/packages",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2004,
						"regions":
						{
						},
						"selection":
						[
							[
								378,
								378
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "qrs.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"client.pem"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\mbj\\Documents\\GitHub\\senseWebIntegration\\Sense3.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 498.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
