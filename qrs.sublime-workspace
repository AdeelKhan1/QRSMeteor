{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sett",
				"settings"
			],
			[
				"te",
				"templateAppId"
			],
			[
				"is",
				"isReady"
			],
			[
				"fresh",
				"freshEnvironment"
			],
			[
				"cos",
				"console"
			],
			[
				"sec",
				"securityFlow"
			],
			[
				"logge",
				"loggedInUser"
			],
			[
				"user",
				"userId"
			],
			[
				"tem",
				"templateApps"
			],
			[
				"cust",
				"customers"
			],
			[
				"tic",
				"ticketResponse"
			],
			[
				"re",
				"response"
			],
			[
				"gene",
				"generationUserId"
			],
			[
				"ge",
				"generationUserId"
			],
			[
				"tick",
				"ticketRequestBody"
			],
			[
				"pa",
				"passport"
			],
			[
				"certi",
				"certicate_communication_options"
			],
			[
				"se",
				"senseParams"
			],
			[
				"redire",
				"redirectUrl"
			],
			[
				"err",
				"error"
			],
			[
				"l",
				"log"
			],
			[
				"pro",
				"proxyRestUri"
			],
			[
				"reques",
				"requestTicket"
			],
			[
				"redi",
				"redirectURI"
			],
			[
				"template",
				"templateAppId"
			],
			[
				"Temp",
				"Template"
			],
			[
				"gee",
				"generatedStreamsFromUser"
			],
			[
				"geen",
				"generatedAppsFromUser"
			],
			[
				"gen",
				"generatedStreamsFromUser"
			],
			[
				"temp",
				"TemplateApps"
			],
			[
				"a",
				"APILogs"
			],
			[
				"nu",
				"numberOfUsers"
			],
			[
				"app",
				"appId"
			],
			[
				"u",
				"ul\tTag"
			],
			[
				"cer",
				"certKey"
			],
			[
				"open",
				"openDoc"
			],
			[
				"c",
				"can"
			],
			[
				"_",
				"_global"
			],
			[
				"ap",
				"appName"
			],
			[
				"rel",
				"reloadAppviaEngine"
			],
			[
				"doc",
				"docId"
			],
			[
				"fa",
				"false"
			],
			[
				"int",
				"introductionSecurity"
			],
			[
				"get",
				"getSecurityRules"
			],
			[
				"del",
				"delete"
			],
			[
				"selt",
				"selectionId"
			],
			[
				"tag",
				"tagGuid"
			],
			[
				"add",
				"addTagViaSyntheticToType"
			],
			[
				"ta",
				"tagGuid"
			],
			[
				"sele",
				"selectionId"
			],
			[
				"sle",
				"selectionId"
			],
			[
				"sel",
				"selectionId"
			],
			[
				"new",
				"newGuid"
			],
			[
				"cre",
				"createSelection"
			],
			[
				"de",
				"deleteStream"
			],
			[
				"reset",
				"resetEnvironment"
			],
			[
				"rest",
				"resetEnvironment"
			],
			[
				"stre",
				"streamId"
			],
			[
				"DI",
				"DIV\tTag"
			],
			[
				"su",
				"securityRules"
			],
			[
				"cert",
				"certicate_communication_options"
			],
			[
				"con",
				"console"
			],
			[
				"Me",
				"message"
			],
			[
				"form",
				"formatDateTime"
			],
			[
				"res",
				"result"
			],
			[
				"Co",
				"console"
			],
			[
				"QS",
				"QSProxy"
			],
			[
				"custom",
				"customer"
			],
			[
				"he",
				"headerValue"
			],
			[
				"vir",
				"virtualProxyClientUsage"
			],
			[
				"auth",
				"authentication"
			],
			[
				"use",
				"useSSL"
			],
			[
				"cuso",
				"customer"
			],
			[
				"CU",
				"Customers"
			],
			[
				"cur",
				"currentUserObject"
			],
			[
				"curret",
				"currentUser"
			],
			[
				"ch",
				"check"
			],
			[
				"curr",
				"currentUser"
			],
			[
				"ur",
				"usersArray"
			],
			[
				"users",
				"usersArray"
			],
			[
				"custo",
				"customers"
			],
			[
				"di",
				"div\tTag"
			],
			[
				"ti",
				"ticket"
			],
			[
				"sens",
				"senseConfig"
			],
			[
				"sesio",
				"senseConnection"
			],
			[
				"cons",
				"console"
			],
			[
				"noc",
				"noSenseConnection"
			],
			[
				"chec",
				"checkSenseIsReady"
			],
			[
				"templat",
				"templateApp"
			],
			[
				"templ",
				"templateFound"
			],
			[
				"updat",
				"updateLocalSenseCopy"
			],
			[
				"QA",
				"QSApp"
			],
			[
				"QR",
				"QRSFunctionsApp"
			],
			[
				"stream",
				"streamId"
			],
			[
				"pu",
				"publishApp"
			],
			[
				"th",
				"throw"
			],
			[
				"Cer",
				"CertsConfig"
			],
			[
				"NPM",
				"NPM_QRS"
			],
			[
				"QRS",
				"QRSConfig"
			],
			[
				"INSER",
				"insert"
			],
			[
				"eNGIN",
				"EngineConfig"
			],
			[
				"qrs",
				"QRSConfig"
			],
			[
				"Cus",
				"Customers"
			],
			[
				"Cu",
				"Customers"
			],
			[
				"name",
				"qDocName"
			],
			[
				"qd",
				"qDocId"
			],
			[
				"cop",
				"copyApp"
			],
			[
				"me",
				"message"
			],
			[
				"CUSTOME",
				"customer"
			],
			[
				"CUST",
				"customer"
			],
			[
				"reje",
				"Rejected"
			],
			[
				"mete",
				"Meteor"
			],
			[
				"find",
				"findOne"
			],
			[
				"conf",
				"config"
			],
			[
				"THE",
				"then"
			],
			[
				"pr",
				"promise"
			],
			[
				"tea",
				"template"
			],
			[
				"q",
				"qDocId"
			],
			[
				"current",
				"currentApp"
			],
			[
				"update",
				"updateSenseInfo"
			],
			[
				"h",
				"href"
			],
			[
				"info",
				"information"
			],
			[
				"in",
				"insert"
			],
			[
				"for",
				"forEach"
			],
			[
				"count",
				"countStreams"
			],
			[
				"counta",
				"countApps"
			],
			[
				"dete",
				"deleteApp"
			],
			[
				"qS",
				"QSocksConfig"
			]
		]
	},
	"buffers":
	[
		{
			"file": "imports/ui/OEMPartner.html",
			"settings":
			{
				"buffer_size": 13235,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imports/ui/OEMPartner.js",
			"settings":
			{
				"buffer_size": 6543,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import { Meteor } from 'meteor/meteor';\nimport { http } from 'meteor/meteor';\nimport { Apps, TemplateApps, GeneratedResources } from '/imports/api/apps';\nimport { APILogs, REST_Log } from '/imports/api/APILogs';\n\n//import meteor collections\nimport { Streams } from '/imports/api/streams';\nimport { Customers } from '/imports/api/customers';\nimport * as QSApp from '/imports/api/server/QRSFunctionsApp';\nimport * as QSStream from '/imports/api/server/QRSFunctionsStream';\nimport * as QSProxy from '/imports/api/server/QPSFunctions';\nimport * as QSSystem from '/imports/api/server/QRSFunctionsSystemRules';\n\n//import config for Qlik Sense QRS and Engine API\nimport { senseConfig, engineConfig, certs, authHeaders } from '/imports/api/config';\nimport '/imports/startup/accounts-config.js';\n\n\n//install NPM modules\nvar fs = require('fs');\nvar qsocks = require('qsocks');\n\nMeteor.startup(function() {\n    process.env.ROOT_URL = 'http://' + Meteor.settings.public.host;\n    console.log('********* Meteor runs on host ROOT_URL: ', process.env.ROOT_URL);\n    //console.log('********* On meteor startup, Meteor tool registers itself at Qlik Sense to get notifications from Sense on changes to apps and streams.');\n    //console.log('********* we try to register a notification on this URL: HTTP post to http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app');\n    //console.log('********* The notification URL for Streams is: ' + Meteor.settings.private.notificationURL + '/streams');\n\n    //Create notification listener in Qlik sense https://help.qlik.com/en-US/sense-developer/3.1/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Notification-Remove-Change-Subscription.htm\n    try {\n        const resultApp = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app', {\n            headers: authHeaders,\n            params: { 'xrfkey': senseConfig.xrfkey },\n            data: Meteor.settings.private.notificationURL + '/apps'\n        })\n\n        const resultStream = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=stream', {\n                headers: authHeaders,\n                params: { 'xrfkey': senseConfig.xrfkey },\n                data: Meteor.settings.private.notificationURL + '/streams'\n            })\n            //console.log('Register notication success');\n            // //console.log('the result from sense register App notification was: ', resultApp);\n            // //console.log('the result from sense register Stream notification was: ', resultStream);\n    } catch (err) {\n        console.error('Create notification subscription in sense qrs failed', err);\n        // throw new Meteor.Error('Create notification subscription in sense qrs failed', err);\n    }\n\n\n    console.log('## setting up mongo indexes on generationUserId in the generated resources, customers and other collections, to increase mongo performance');\n    TemplateApps._ensureIndex({ \"generationUserId\": 1, \"id\": 1 });\n    GeneratedResources._ensureIndex({ \"generationUserId\": 1, \"id\": 1 });\n    Apps._ensureIndex({ \"id\": 1 });\n    Customers._ensureIndex({ \"generationUserId\": 1 });\n    Streams._ensureIndex({ \"id\": 1 });\n    APILogs._ensureIndex({ \"createdBy\": 1 });\n    APILogs._ensureIndex({ \"createDate\": 1 });\n\n    console.log('remove the all generated resources on each server start');\n    Meteor.setTimeout(function() {\n        console.log('remove all generated resources in mongo and qlik sense periodically by making use of a server side timer');\n        Meteor.call('removeGeneratedResources', {});\n    }, 0); //remove all logs directly at startup\n\n    Meteor.setInterval(function() {\n        console.log('remove all generated resources in mongo and qlik sense periodically by making use of a server side timer');\n        Meteor.call('removeGeneratedResources', {});\n    }, 7 * 86400000); //remove all logs every 7 days\n});\n\n\n\nMeteor.methods({\n    getRedirectUrl(proxyRestUri, targetId, loggedInUser) {\n        // console.log(\"Meteor will now look which user is currently logged in, and request a ticket for this ID, and add his group memberships.\");\n        var call = {};\n        call.action = 'STEP 3: Server getRedirectUrl method'\n        call.request = 'Meteor server side method getRedirectUrl received a incoming method call from the meteor client. Meteor server will now look which user is currently logged in, and request a ticket for this ID, and add his group memberships.';\n        REST_Log(call);\n\n        //first find the customers that have a logged in users (mongo returns a complete document)\n        var customer = Customers.findOne({ generationUserId: loggedInUser, 'users.currentlyLoggedIn': true });\n        // console.log('In our local database we can find the customer with the currentlyLoggedIn set to true for user: ' + loggedInUser + ', the customer which contains the user that the user selected with the dropdown: ', customer);\n\n        //now we have the document, we can look in the array of users, to find the one that is logged in.\n        if (!customer) {\n            const error = 'You have not selected a user you want to simulate the Single Sign on with. Please select a user on the left side of the screen';\n            throw new Meteor.Error('No user', error);\n        } else {\n            var user = _.find(customer.users, { 'currentlyLoggedIn': true });\n\n            console.log('UserID currently logged in in the demo platform: ' + loggedInUser + '. Meteor server side thinks the meteor.userId is ' + Meteor.userId() + '. We use this as the UDC name');\n            //Create a paspoort (ticket) request: user directory, user identity and attributes\n            var passport = {\n                'UserDirectory': Meteor.userId(), //Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n                'UserId': user.name, //the current user that we are going to login with\n                'Attributes': [{ 'group': customer.name.toUpperCase() }, //attributes supply the group membership from the source system to Qlik Sense\n                    { 'group': user.country.toUpperCase() },\n                    { 'group': user.group.toUpperCase() }\n                ]\n            }\n\n            // console.log('Request ticket for this user passport\": ', passport);\n\n            //logging only\n            var call = {};\n            call.action = 'STEP 4: Request ticket (SSO)';\n            call.request = 'Request ticket for this user passport: \": ' + JSON.stringify(passport);\n            REST_Log(call);\n\n            return QSProxy.getRedirectURL(passport, proxyRestUri, targetId);\n        }\n    },\n    generateStreamAndApp(customers) {\n        // //console.log('generateStreamAndApp');\n        check(customers, Array);\n\n        Meteor.call('removeGeneratedResources', { 'generationUserId': Meteor.userId() }); //first clean the environment\n        QSApp.generateStreamAndApp(customers, this.userId); //then, create the new stuff\n        Meteor.call('updateLocalSenseCopy');\n        return;\n    },\n    resetEnvironment() {\n        Meteor.call('removeGeneratedResources', { 'generationUserId': Meteor.userId() });\n        TemplateApps.remove({ 'generationUserId': Meteor.userId() });\n        Customers.remove({ 'generationUserId': Meteor.userId() });\n        APILogs.remove({ 'generationUserId': Meteor.userId() });\n    },\n    removeGeneratedResources(generationUserSelection) {\n        //console.log('remove GeneratedResources method, before we make new ones');\n        //logging only\n        if (generationUserSelection) {\n            const call = {};\n            call.action = 'Remove generated resources';\n            call.request = 'Remove all apps and streams in Qlik Sense for userId: ' + generationUserSelection.generationUserId;\n            REST_Log(call);\n        }\n        GeneratedResources.find(generationUserSelection)\n            .forEach(function(resource) {\n                // this.unblock()\n                //console.log('resetEnvironment for userId', Meteor.userId());generationUserSelection.generationUserId\n\n                //If not selection was given, we want to reset the whole environment, so also delete the streams.\n                if (!generationUserSelection.generationUserId) {\n                    try {\n                        Meteor.call('deleteStream', resource.streamId); //26-9 can't delete stream, because each user creates a stream with the same name...\n                    } catch (err) {\n                        //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                    } //don't bother if generated resources do not exists, just continue\n                }\n                //delete apps always\n                try {\n                    Meteor.call('deleteApp', resource.appId);\n                } catch (err) {\n                    //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                }\n            })\n        GeneratedResources.remove(generationUserSelection);\n        APILogs.remove(generationUserSelection);\n    },\n    resetLoggedInUser() {\n        //console.log(\"***Method resetLoggedInUsers\");\n        //console.log('call the QPS logout api, to invalidate the session cookie for each user in our local database');\n\n        //reset the local database. set all users to not logged in. We need this code because we do a simulation of the login and not a real end user login.\n        Customers.find({ 'generationUserId': Meteor.userId() })\n            .forEach(function(customer) {\n                var updatedUsers = _.map(customer.users, function(user) {\n                    user.currentlyLoggedIn = false;\n\n                    //and just logout everybody in the user list                            \n                    QSProxy.logoutUser(Meteor.userId(), user.name);\n                    return user;\n                })\n\n                Customers.update(customer._id, {\n                    $set: { users: updatedUsers },\n                });\n\n            });\n    },\n    simulateUserLogin(name) {\n        check(name, String);\n        Meteor.call('resetLoggedInUser');\n        console.log('*** Reset all logged in user done, now write in our local database the name for the current simulated user: generationUserId: ' + Meteor.userId() + ' & users.name:' + name);\n        Customers.update({ 'generationUserId': Meteor.userId(), \"users.name\": name }, {\n            $set: {\n                'users.$.currentlyLoggedIn': true\n            }\n        })\n    },\n    copyApp(guid, name) {\n        check(guid, String);\n        check(name, String);\n        const id = QSApp.copyApp(guid, name);\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    copyAppSelectedCustomers(currentApp) { //the app the user clicked on        \n        if (!currentApp) {\n            throw new Meteor.Error('No App selected to copy')\n        };\n\n        customers = Customers.find({ 'generationUserId': Meteor.userId(), checked: true }); //all selected customers\n        if (!customers) {\n            throw new Meteor.Error('No customers selected to copy the app for')\n        };\n\n        customers\n            .forEach(customer => {\n                const newAppId = Meteor.call('copyApp', currentApp.id, customer.name + '-' + currentApp.name);\n                Meteor.call('updateLocalSenseCopy');\n\n                //store in the database that the user generated something, so we can later on remove it.\n                GeneratedResources.insert({\n                    'generationUserId': Meteor.userId(),\n                    'customer': null,\n                    'streamId': null,\n                    'appId': newAppId\n                });\n            });\n    },\n    deleteApp(guid) {\n        check(guid, String);\n        if (guid !== Meteor.settings.public.templateAppId) {\n            //logging only\n            const call = {};\n            call.action = 'Delete app';\n            call.request = 'Delete app: ' + guid;\n            REST_Log(call);\n\n            const id = QSApp.deleteApp(guid);\n            Meteor.call('updateLocalSenseCopy');\n            return id;\n        } else {\n            throw new Meteor.Error('youCantDeleteTemplateApp');\n        }\n    },\n    removeAllCustomers: function() {\n        return Customers.remove({ 'generationUserId': Meteor.userId() });\n    },\n\n    //STREAM METHODS\n    deleteStream(guid) {\n        check(guid, String);\n        //logging only\n        const call = {};\n        call.action = 'Delete stream';\n        call.request = 'Delete stream: ' + guid;\n        REST_Log(call);\n\n        const id = QSStream.deleteStream(guid);\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    createStream(name) {\n        const streamId = QSStream.createStream(name);\n        Meteor.call('updateLocalSenseCopy');\n\n        //store in the database that the user generated something, so we can later on remove it.\n        GeneratedResources.insert({\n            'generationUserId': Meteor.userId(),\n            'customer': null,\n            'streamId': streamId.data.id,\n            'appId': null\n        });\n        return streamId;\n    },\n    getStreams() {\n        return QSStream.getStreams();\n    },\n    getSecurityRules() {\n        return QSSystem.getSecurityRules();\n    },\n\n    updateLocalSenseCopyApps() {\n        //delete the local content of the database before updating it\n        Apps.remove({});\n\n        //Update the Apps with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n    },\n    updateLocalSenseCopyStreams() {\n        //delete the local content of the database before updating it        \n        Streams.remove({});\n\n        //Update the Streams with fresh info from Sense        \n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n\n    updateLocalSenseCopy() {\n        // //console.log('Method: update the local mongoDB with fresh data from Qlik Sense: call QRS API getStreams and getApps');\n        //delete the local content of the database before updating it\n        Apps.remove({});\n        Streams.remove({});\n\n        //Update the Apps and Streams with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n\n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n    // checkSenseIsReady() {\n    //     //console.log('Method: checkSenseIsReady, TRY TO SEE IF WE CAN CONNECT TO QLIK SENSE ENGINE VIA QSOCKS');\n\n    //     // try {\n    //     // qsocks.Connect(engineConfig)\n    //     //     .then(function(global) {\n    //     //         // Connected\n    //     //         //console.log('Meteor is connected via Qsocks to Sense Engine API using certificate authentication');\n    //     //         return true;\n    //     //     }, function(err) {\n    //     //         // Something went wrong\n    //     //         console.error('Meteor could not connect to Sense with the config settings specified. The error is: ', err.message);\n    //     //         console.error('the settings are: ', engineConfig)\n    //     //         return false\n    //     //         // throw new Meteor.Error('Could not connect to Sense Engine API', err.message);\n    //     //     });\n\n    //     //TRY TO SEE IF WE CAN CONNECT TO SENSE VIA HTTP\n    //     try{\n    //         const result = HTTP.get('http://' + senseConfig.SenseServerInternalLanIP +':' + senseConfig.port + '/'+ senseConfig.virtualProxy + '/qrs/app/full', { //?xrfkey=' + senseConfig.xrfkey, {\n    //             headers: authHeaders,\n    //             params: { 'xrfkey': senseConfig.xrfkey }\n    //         })//http get\n    //         //console.log(result);\n    //         if(result.statuscode === 200){\n    //             //console.log('We got a result back from Sense with statuscode 200: Success')\n    //             return true;}\n    //         else{return false}\n    //     } catch (err) {\n    //         return false;\n    //         // throw new Meteor.Error('Could not connect via HTTP to Qlik Sense: Is Sense running? Are the firewalls open? Have you exported the certificate for this host? virtualProxy setup?');\n    //     }\n    // }\n});\n\n\n\n//GET APPS USING QSOCKS (FOR DEMO PURPOSE ONLY, CAN ALSO BE DONE WITH QRS API)\n// getApps() {\n//     return QSApp.getApps();\n//     // appListSync = Meteor.wrapAsync(qsocks.Connect(engineConfig)\n//     //     .then(function(global) {\n//     //         global.getDocList()\n//     //             .then(function(docList) {\n//     //                 return (docList);\n//     //             });\n//     //     })\n//     //     .catch(err => {\n//     //         throw new Meteor.Error(err)\n//     //     }));\n//     // result = appListSync();\n//     // return result;\n\n// },\n",
			"file": "server/main.js",
			"file_size": 17824,
			"file_write_time": 131208484600725337,
			"settings":
			{
				"buffer_size": 17411,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "settings-development.json",
			"settings":
			{
				"buffer_size": 1575,
				"line_ending": "Windows"
			}
		},
		{
			"file": "imports/ui/generation.js",
			"settings":
			{
				"buffer_size": 10910,
				"line_ending": "Windows"
			}
		},
		{
			"file": "imports/api/server/QRSFunctionsApp.js",
			"settings":
			{
				"buffer_size": 17335,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "imports/ui/UIHelpers.js",
			"settings":
			{
				"buffer_size": 11493,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 784.0,
		"last_filter": "P",
		"selected_items":
		[
			[
				"P",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"package",
				"Preferences: Browse Packages"
			],
			[
				"tern",
				"TernJS: Reload"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 800.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server"
	],
	"file_history":
	[
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/steps.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/OEMPartner.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/OEMPartner.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/nav.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/main.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layout.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/router.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/legal.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/client/SSO.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/docker image run.bat",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/testBat.bat",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/UIHelpers.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QRSFunctionsApp.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/routes.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/Makefile",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/Dockerfile",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/.dockerignore",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/docker image run.bat",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/client/SSO.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/APILogs.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/simulateUserLogin.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introduction.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/simulateUserLogin.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QRSFunctionsStream.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QPSFunctions.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.meteor/packages",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/config.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introductionSecurity.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introduction.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/layout.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/APILogs.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-development.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/publications.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/.gitignore",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introductionSecurity.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/APILogs.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/security_templates.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/startup/accounts-config.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/package.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/customers.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-production.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/settings-development - example.json",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/apps.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/streams.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/README.md",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/server/routes.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/sso.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/SSO.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/sso.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/server/sso.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/SSO/sso.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/SSO.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/SSO.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/qlik-auth/index.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/server/qlikAuthSSO.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/.custom.semantic.json",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/SSO/sso.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/SSO/sso.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/users.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/generation.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/architecture.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/architecture.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/webIntegration.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/accounts.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/securityRules.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/securityRules.js",
		"/C/Users/mbj/Documents/Qlik/Sense/Extensions/heatmap/ralfbecher-QlikSense_Extension_2DimHeatmap-b88b592/bi-irregular-2dim-heatmap/bi-irregular-2dim-heatmap.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/test.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/sequenceDiagrams.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/client/stylesheets/sequenceDiagrams.css",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/sequenceDiagrams.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/qrs.sublime-project",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/sequence diagrams/sequenceDiagrams.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/sequence diagrams/sequenceDiagrams.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/sequenceDiagrams.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/webIntegration.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/lib/yogiben.js",
		"/C/Users/mbj/Desktop/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/User/Preferences.sublime-settings",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/pages/sequenceDiagrams.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/homeAbout.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/homeAbout.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/homeAbout.css",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/nav.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/server/QRSFunctionsSystemRules.js",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/server/yogiben.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/qsocks/qsocks.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/security_templates.html",
		"/C/Users/mbj/Documents/GitHub/QRSMeteor/imports/ui/security_templates.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/lib/router.js",
		"/C/Users/mbj/Desktop/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/HTML-CSS-JS Prettify/HTMLPrettify.sublime-settings",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/system/service.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/site/globals/site.variables.import.less",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/site/globals/site.overrides.import.less",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/introductionExtended.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/definitions/modules/progress.import.less",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/themes/default/globals/site.variables.import.less",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/lib/site/globals/reset.variables.import.less",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/customer.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/customer.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/steps.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/pages/QMC.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/client/main.html",
		"/C/Users/MBJ/Desktop/jacob.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/startUp.bat",
		"/F/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/startup/simulateUserLogin.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/qrs/index.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/node_modules/qrs/lib/qrs.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/QRSFunctionsApp.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/QRSFunctionsSystemRules.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/QPSFunctions.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/checkConfig.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/clientConfig.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/checkConfig.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/body.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/notFound.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/body.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/ui/Pages/homeAbout.html",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/QRSFunctionsStream.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/imports/api/routes.js",
		"/C/Users/MBJ/Documents/GitHub/QRSMeteor/server/seeds.js",
		"/F/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/User/Preferences.sublime-settings",
		"/F/LiberKey/MyApps/Sublime Text Build 3083/Data/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/C/Meteor projects/qrsmeteor/client/main.js"
	],
	"find":
	{
		"height": 64.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui\\pages",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client\\lib",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client\\lib",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports\\ui",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\server",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\client",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor\\imports",
			"C:\\Users\\MBJ\\Documents\\GitHub\\QRSMeteor",
			"C:\\Meteor projects\\slager 10dec\\client",
			"C:\\Meteor projects\\slager 10dec",
			"C:\\Users\\Qlik\\Meteor projects\\firstmeteor",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\client",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\server",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete\\lib",
			"C:\\Users\\Qlik\\Meteor projects\\pluralsight\\1-exercise-files\\rocket-shop-complete"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"stream",
			"insert",
			"United states",
			"Update",
			"update",
			"delete",
			"deleteapp",
			"delete",
			"Meteor.call('updateLocalSenseCopy');",
			"notification",
			"certificates",
			"see",
			"generate",
			"stepByStep",
			"stream",
			"console",
			"complete",
			"80",
			"removeGeneratedResources",
			"step",
			"get list of apps",
			"step",
			"localhost",
			"modal",
			"Customers.insert",
			"');\n",
			"//console.log",
			"account",
			"consumer",
			"step3",
			" console.log(",
			"_ensureIndex",
			"delete",
			"TemplateApps",
			"template",
			"REST_Log",
			"console.log",
			"ticket",
			"data",
			"qlik",
			"targetId",
			"proxyRestUri",
			"cert",
			"url",
			"profile",
			"step4",
			"../api/customers.js",
			"genera",
			"getFileRealPath",
			"cert.cert",
			"onBeforeAction",
			"ip",
			"external",
			"First",
			"first",
			"init",
			"initialize",
			"d",
			"conceptBehind",
			"URL_howDoesSaaSAutomationWork",
			"this",
			"delete",
			"REST_Log",
			"flow",
			"hook",
			"dummyCustomers",
			"reset",
			"GeneratedResources",
			"selfservice",
			"APIAutomation",
			"four",
			"ten",
			"URL_howDoesSaaSAutomationWork",
			"rgb(255, 245, 173)",
			"rgb(94,168,25)",
			"fill: rgb(255, 245, 173);",
			"sizing",
			"success",
			"modal",
			"lodash",
			"_",
			"lodash",
			"getApps",
			"role",
			"import",
			"createby",
			"consumer",
			"value",
			"six",
			"lodash",
			"first",
			"forbidclientaccountcreation",
			"accountcreation",
			"accountcre",
			"tiny",
			"large",
			"button",
			"facebook",
			"Shell",
			"architecture",
			"192.168.1.150",
			"2008ENT",
			"cert",
			"uses",
			"senseConfig.SenseServerInternalLanIP + '/' + senseConfig.virtualProxy",
			"InternalLanIP+ '/'+ senseConfig.virtualProxy",
			"InternalLanIP +':' + senseConfig.port + '/'+ senseConfig.virtualProxy",
			"senseConfig.SenseServerInternalLanIP + '/' + senseConfig.virtualProxy",
			"senseConfig.host",
			"docId",
			"publish",
			"clientId",
			"google",
			"Meteor.settings.public",
			"ServiceConfiguration",
			"serivceconfiguration",
			"forbidClientAccountCreation",
			"google",
			"gmail",
			"facebook",
			"forbidClientAccountCreation",
			"Accounts",
			"forbidClientAccountCreation",
			"Accounts.config",
			"AdminConfig",
			"AdminConfig ",
			"atNavButton",
			"isSelectedCustomer"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nlsch-mbj3",
			"console.log",
			"//console.log",
			"passport",
			"options.Certificate",
			"rgb(220,220,220)",
			"fill: rgb(215,215,217);",
			"mini",
			"tiny",
			"PRESALES1",
			"senseConfig.SenseServerInternalLanIP +':' + senseConfig.port + '/'+ senseConfig.virtualProxy",
			"senseConfig.SenseServerInternalLanIP",
			"appId",
			"Meteor.settings.private",
			"isSelectedCustomer",
			"Customer",
			"selectedCustomer",
			"h4",
			"500",
			"400225",
			"400",
			"",
			"name",
			"h4",
			"REST_Log.",
			"from '/imports/api/server/QRSFunctionsApp';",
			"from '/imports/api/server/QRSFunctionsStream';",
			"from '/imports/api/server/QRSFunctionsSystemRules';",
			"/imports/api/server/QRSFunctionsSystemRules",
			"from '/imports/api/server/QRSFunctionsStream';",
			"passport",
			"Meteor.settings.public",
			"\"",
			"'",
			"virtualProxyClientUsage",
			"users",
			"h3",
			"QRS Functions Appp",
			"updateLocalSenseCopy",
			"UpdateLocalSenseCopy",
			"updateSenseInfo",
			"in Qlik Sense via the QRS API",
			"currentApp.name",
			"id",
			"",
			"''",
			"",
			"_senseConfig",
			"senseConfig",
			"NPM_QRS",
			"QSApp.",
			"return QS.",
			"P",
			"Meteor.Error",
			"new P",
			"P",
			"checked",
			"true",
			"updateSenseInfo",
			"\\\\",
			"",
			"category",
			"",
			"customers",
			"order",
			"Orders",
			"Slagerij"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "imports/ui/OEMPartner.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13235,
						"regions":
						{
						},
						"selection":
						[
							[
								4189,
								4189
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1315.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "imports/ui/OEMPartner.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6543,
						"regions":
						{
						},
						"selection":
						[
							[
								5953,
								6013
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4328.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "server/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17411,
						"regions":
						{
						},
						"selection":
						[
							[
								12411,
								12411
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6117.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "settings-development.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1575,
						"regions":
						{
						},
						"selection":
						[
							[
								559,
								572
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "imports/ui/generation.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10910,
						"regions":
						{
						},
						"selection":
						[
							[
								9774,
								9745
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4203.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "imports/api/server/QRSFunctionsApp.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17335,
						"regions":
						{
						},
						"selection":
						[
							[
								2741,
								2913
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 967.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "imports/ui/UIHelpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11493,
						"regions":
						{
						},
						"selection":
						[
							[
								10336,
								10336
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 4118.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 37.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "",
	"project": "qrs.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"imports\\ui\\layout.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\MBJ\\Documents\\GitHub\\senseWebIntegration\\Sense3.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 585.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
